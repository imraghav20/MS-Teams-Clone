{"version":3,"sources":["assets/ms_teams_logo_white.png","components/TopBar.jsx","components/Input.jsx","api/index.js","actions/auth.js","views/Auth.js","assets/ding.mp3","SocketContext.js","components/CallSettings.jsx","components/Notifications.jsx","actions/message.js","components/Message.jsx","components/Chat.jsx","components/Participants.jsx","views/VideoCall.js","actions/conversation.js","assets/chat_icon.png","components/Conversation.jsx","components/ChatTopBar.jsx","views/Chat.js","App.js","reducers/auth.js","reducers/conversation.js","reducers/message.js","reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","display","flexDirection","width","border","background","brand","alignItems","toolbar","justifyContent","profile","userName","purple","color","backgroundColor","TopBar","useState","JSON","parse","localStorage","getItem","user","setUser","dispatch","useDispatch","location","useLocation","history","useHistory","classes","logout","type","push","useEffect","token","decode","exp","Date","getTime","AppBar","className","position","Grid","container","direction","item","xs","md","src","ms_teams_logo_white","alt","height","Typography","variant","fontFamily","Toolbar","result","Avatar","name","charAt","Button","onClick","component","Link","to","Input","handleChange","label","autoFocus","handleShowPassword","TextField","onChange","required","fullWidth","InputProps","endAdornment","InputAdornment","IconButton","Visibility","VisibilityOff","API","axios","create","baseURL","interceptors","request","use","req","headers","Authorization","signUp","formData","post","signIn","getUserConversation","chatId","get","AUTH","body","paper","marginTop","spacing","marginBottom","padding","root","margin","avatar","form","submit","googleButton","initialState","firstName","lastName","email","password","confirmPassword","Auth","setFormData","showPassword","setShowPassword","isSignUp","setIsSignUp","e","target","value","Container","maxWidth","Paper","elevation","autoComplete","onSubmit","preventDefault","a","api","data","console","log","signup","signin","prevShowPassword","justify","prevIsSignUp","style","textTransform","SocketContext","createContext","socket","io","ContextProvider","children","stream","setStream","videoStream","setVideoStream","me","setMe","call","setCall","callStarted","setCallStarted","callJoined","setCallJoined","callAccepted","setCallAccepted","callEnded","setCallEnded","setName","chatVisibility","setChatVisibility","participantsVisible","setParticipantsVisible","handRaised","setHandRaised","callFull","setCallFull","roomId","useRef","window","hash","replace","myVideo","userVideo","connectionRef","messageRef","participantsRef","audio","Audio","sound","navigator","mediaDevices","getUserMedia","video","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivedCall","length","splice","callUser","peer","Peer","initiator","trickle","emit","userToCall","signalData","str","TextDecoder","obj","play","hostName","Provider","handleHand","handState","startCall","num","userId","otherUserId","leaveCall","destroy","reload","answerCall","text","wrapper","top","flexGrow","menuButton","marginRight","title","breakpoints","up","CallSettings","useContext","videoOn","setVideoOn","audioOn","setAudioOn","shareScreen","setShareScreen","shareStream","setShareStream","stopSharingScreen","replaceTrack","getTracks","stop","Tooltip","getVideoTracks","forEach","track","enabled","VideocamOff","fontSize","fill","Videocam","getAudioTracks","MicOff","Mic","getDisplayMedia","cursor","onended","ScreenShare","StopScreenShare","href","Assignment","PanTool","People","PhoneDisabled","notification","zIndex","left","transform","Notifications","sendMessage","msg","newMessage","payload","message","borderRadius","float","clear","right","middle","marginLeft","textAlign","fontWeight","time","Message","_id","senderId","join","senderName","format","createdAt","messageField","chatContainer","overflowY","Chat","setMessage","chat","messages","getMessages","map","action","date","toISOString","send","stringify","convoId","sendUserMessage","Send","overflow","participant","paddingLeft","paddingRight","Participants","p","down","typography","button","VideoCall","meetingName","setMeetingName","conversation","conversationName","getMeetName","gutterBottom","playsInline","muted","ref","autoPlay","align","startIcon","Phone","createConversation","convo","newConvo","getConversation","conversationImg","objectFit","Conversation","chat_icon","ChatTopBar","convoName","isFormVisible","setIsFormVisible","open","focus","messenger","chatMenu","flex","chatMenuTopBar","borderRight","conversationWrapper","chatBox","chatBoxWrapper","chatBoxTop","chatBoxBottom","removeItem","conversations","useSelector","state","currentChatId","setCurrentChatId","flag","setFlag","error","setMsg","formMsgData","formCallData","setFormCallData","App","path","exact","LOGOUT","authReducer","authData","setItem","CREATE","GET_ALL","GET_CONVO","conversationReducer","SEND","messageReducer","reducers","combineReducers","auth","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ee8220e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ms_teams_logo_white.e18990d3.png\";","import React, { useState, useEffect } from 'react';\r\nimport { Typography, AppBar, Grid, Toolbar, Avatar, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport decode from 'jwt-decode';\r\n\r\nimport ms_teams_logo_white from '../assets/ms_teams_logo_white.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        border: '2px solid black',\r\n        background: '#0a0a0a',\r\n    },\r\n    brand: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n    },\r\n    profile: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        width: '400px',\r\n    },\r\n    userName: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    purple: {\r\n        color: 'black',\r\n        backgroundColor: '#6264a7',\r\n    },\r\n}));\r\n\r\nconst TopBar = () => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const logout = () => {\r\n        dispatch({ type: \"LOGOUT\" });\r\n        history.push('/auth');\r\n        setUser(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const token = user?.token;\r\n        if (token) {\r\n            const decodedToken = decode(token);\r\n            if (decodedToken.exp * 1000 < new Date().getTime()) logout();\r\n        }\r\n        setUser(JSON.parse(localStorage.getItem('profile')));\r\n    }, [location]);\r\n\r\n    return (\r\n        <div>\r\n            <AppBar className={classes.appBar} position=\"static\">\r\n                <Grid container direction=\"row\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <div className={classes.brand}>\r\n                            <img src={ms_teams_logo_white} alt=\"icon\" height=\"60\" />\r\n                            <Typography variant=\"h6\" fontFamily=\"Open Sans\">Let's Connect</Typography>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Toolbar className={classes.toolbar}>\r\n                            {user?.result ? (\r\n                                <div className={classes.profile}>\r\n                                    <Avatar className={classes.purple} >{user?.result.name.charAt(0)}</Avatar>\r\n                                    <Typography className={classes.userName} variant=\"h6\">{user?.result.name}</Typography>\r\n                                    <Button variant=\"contained\" className={classes.logout} color=\"primary\" onClick={logout}>Logout</Button>\r\n                                </div>\r\n                            ) : (\r\n                                <Button component={Link} to=\"/auth\" variant=\"contained\" color=\"primary\">Sign In</Button>\r\n                            )}\r\n                        </Toolbar>\r\n                    </Grid>\r\n                </Grid>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { TextField, Grid, InputAdornment, IconButton } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\n\r\n// component used to take inputs from user in auth form\r\nconst Input = ({ name, handleChange, label, autoFocus, type, handleShowPassword }) => {\r\n    return (\r\n        <Grid item xs={12}>\r\n            <TextField\r\n                name={name}\r\n                onChange={handleChange}\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                label={label}\r\n                autoFocus={autoFocus}\r\n                type={type}\r\n                InputProps={name === \"password\" ? {\r\n                    endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton onClick={handleShowPassword}>\r\n                                {/* Toggle between show password and hide password */}\r\n                                {type === \"password\" ? <Visibility /> : <VisibilityOff />}\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    )\r\n                } : null}\r\n            />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import axios from 'axios';\r\n\r\nconst API = axios.create({baseURL: \"https://video-chat-app-imraghav20.herokuapp.com/api\"});\r\n// const API = axios.create({baseURL: \"http://localhost:5000/api\"});\r\n\r\n// add authentication token in request headers for the auth middleware\r\nAPI.interceptors.request.use((req) => {\r\n    if(localStorage.getItem(\"profile\")){\r\n        req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem(\"profile\")).token}`;\r\n    }\r\n    return req;\r\n})\r\n\r\nexport const signUp = (formData) => API.post('/auth/register', formData);\r\n\r\nexport const signIn = (formData) => API.post('/auth/login', formData);\r\n\r\nexport const getConversations = () => API.get('/conversations');\r\n\r\nexport const createConversation = (newConvo) => API.post('/conversations', newConvo);\r\n\r\nexport const getUserConversation = (chatId) => API.get(`/conversations/${chatId}`);\r\n\r\nexport const sendMessage = (newMessage) => API.post('/messages', newMessage);\r\n\r\nexport const addConversation = (chatId) => API.post(`/users/${chatId}`);","import * as api from '../api/index.js';\r\n\r\nconst AUTH = \"AUTH\";\r\n\r\n// dispatch action type and data to authReducer\r\n\r\nexport const signin = (formData, history) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.signIn(formData);\r\n\r\n    dispatch({ type: AUTH, data });\r\n\r\n    history.push('/');\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const signup = (formData, history) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.signUp(formData);\r\n\r\n    dispatch({ type: AUTH, data });\r\n\r\n    history.push('/');\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Avatar, Button, Paper, Grid, Typography, Container } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\n\r\nimport Input from '../components/Input';\r\n\r\nimport { signin, signup } from '../actions/auth';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    body: {\r\n        background: '#6264a7',\r\n        height: '100vh',\r\n        width: '100vw',\r\n        position: 'fixed'\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(4),\r\n        marginBottom: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(2),\r\n    },\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: '#6264a7',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    googleButton: {\r\n        marginBottom: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst initialState = { firstName: '', lastName: '', email: '', password: '', confirmPassword: '' };\r\n\r\nconst Auth = () => {\r\n    const classes = useStyles();\r\n    const [formData, setFormData] = useState(initialState);  // login/signup data\r\n    const [showPassword, setShowPassword] = useState(false);  // showpassword icon vidible or not\r\n    const [isSignUp, setIsSignUp] = useState(false);  // change form depending on whether user wants to sign up or log in\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // on form submission\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (isSignUp) {\r\n            dispatch(signup(formData, history))\r\n        }\r\n        else {\r\n            dispatch(signin(formData, history))\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value })\r\n    };\r\n\r\n    const handleShowPassword = () => {\r\n        setShowPassword((prevShowPassword) => !prevShowPassword);\r\n    };\r\n\r\n    const switchMode = () => {\r\n        setIsSignUp((prevIsSignUp) => !prevIsSignUp);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <Paper className={classes.paper} elevation={3}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography variant=\"h5\">{isSignUp ? 'Sign Up' : 'Sign In'}</Typography>\r\n                        <form autoComplete=\"off\" className={classes.form} onSubmit={handleSubmit}>\r\n                            <Grid container spacing={2}>\r\n                                {\r\n                                    isSignUp && (\r\n                                        <>\r\n                                            <Input name=\"firstName\" label=\"First Name\" handleChange={handleChange} autoFocus />\r\n                                            <Input name=\"lastName\" label=\"Last Name\" handleChange={handleChange} />\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                <Input name=\"email\" label=\"Email Address\" handleChange={handleChange} type=\"email\" />\r\n                                <Input name=\"password\" label=\"Password\" handleChange={handleChange} type={showPassword ? \"text\" : \"password\"} handleShowPassword={handleShowPassword} />\r\n                                {isSignUp && (\r\n                                    <Input name=\"confirmPassword\" label=\"Confirm Password\" handleChange={handleChange} type=\"password\" />\r\n                                )}\r\n                            </Grid>\r\n                            <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                                {isSignUp ? \"Sign Up\" : \"Sign In\"}\r\n                            </Button>\r\n                            <Grid container justify=\"center\">\r\n                                <Grid item>\r\n                                    <Button onClick={switchMode} style={{ textTransform: 'none' }}>\r\n                                        {isSignUp ? \"Already have an account? Sign in.\" : \"Don't have an account? Sign up.\"}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Paper>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n","export default __webpack_public_path__ + \"static/media/ding.70168eef.mp3\";","import React, { createContext, useState, useRef, useEffect } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nimport sound from './assets/ding.mp3';\r\n\r\nimport { addConversation } from './api/index';\r\n\r\nconst SocketContext = createContext();\r\n\r\n// establish socket connection\r\nconst socket = io('https://video-chat-app-imraghav20.herokuapp.com/');\r\n// const socket = io('http://localhost:5000/');\r\n\r\nconst ContextProvider = ({ children }) => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));   // current logged in user\r\n\r\n    const [stream, setStream] = useState(null);  // media stream of user\r\n    const [videoStream, setVideoStream] = useState(null);  // video stream of user to store and replace suring screen sharing\r\n    const [me, setMe] = useState('');  // user socket id\r\n    const [call, setCall] = useState({});  // current call\r\n    const [callStarted, setCallStarted] = useState(false);  // track if call has started\r\n    const [callJoined, setCallJoined] = useState(false);  // track if 2nd user has joined the call\r\n    const [callAccepted, setCallAccepted] = useState(false);  // track if 1st user has accepted the call\r\n    const [callEnded, setCallEnded] = useState(false);  // track if call has ended\r\n    const [name, setName] = useState('');  // name of current user\r\n    const [chatVisibility, setChatVisibility] = useState(false);  // is chat visible\r\n    const [participantsVisible, setParticipantsVisible] = useState(false);  // are all participant names visible\r\n    const [handRaised, setHandRaised] = useState(false);  // if the user has raised the hand or not\r\n    const [callFull, setCallFull] = useState(false);  // track if chat has reached it capacity (i.e. 2)\r\n\r\n    const roomId = useRef(window.location.hash.replace('#/video-call/', ''));  // store current room Id\r\n    const myVideo = useRef();  // stores reference to user video\r\n    const userVideo = useRef();  // stores reference to other user's video\r\n    const connectionRef = useRef();  // stores the peer-to-peer connection\r\n    const messageRef = useRef([]);  // stores the chat messages\r\n    const participantsRef = useRef([]);  // stores the participants names\r\n    const audio = useRef(new Audio(sound));  // audio that plays on chat notification\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        // check if user is logged in\r\n        const token = user?.token;\r\n        if (!token) {\r\n            history.push('/auth');\r\n            setUser(null);\r\n        }\r\n        else {\r\n            navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n                .then((currentStream) => {\r\n                    setStream(currentStream);\r\n\r\n                    // setting media stream of user\r\n                    myVideo.current.srcObject = currentStream;\r\n                    setVideoStream(currentStream);\r\n                });\r\n\r\n            setName(user.result.name);\r\n            participantsRef.current.push({ name: user.result.name, handRaised: false });\r\n\r\n            addConversation(roomId.current);  // adding the conversationID of this room to the user's database \r\n            // if not already present using the API\r\n\r\n            socket.on('me', (id) => {\r\n                setMe(id);\r\n            });\r\n\r\n            // on receiving a call\r\n            socket.on('callUser', ({ from, name: callerName, signal }) => {\r\n                setCall({ isReceivedCall: true, from, name: callerName, signal });\r\n            });\r\n\r\n            // when other user raises hand\r\n            socket.on(\"hand-raised\", () => {\r\n                if (participantsRef.current.length > 1) {\r\n                    participantsRef.current[1].handRaised = true;\r\n                }\r\n                setParticipantsVisible(false);\r\n                setParticipantsVisible(true);\r\n            });\r\n\r\n            // when other user lowers hand\r\n            socket.on(\"hand-lowered\", () => {\r\n                if (participantsRef.current.length > 1) {\r\n                    participantsRef.current[1].handRaised = false;\r\n                }\r\n                setParticipantsVisible(false);\r\n                setParticipantsVisible(true);\r\n            });\r\n\r\n            // when call is ended by other user\r\n            socket.on(\"callEnded\", () => {\r\n                // restore everything to default state\r\n                connectionRef.current = null;\r\n                if (participantsRef.current.length > 1) {\r\n                    participantsRef.current.splice(1, 1);\r\n                }\r\n                setCallEnded(true);\r\n                setCall({});\r\n                setCallAccepted(false);\r\n                setCallJoined(false);\r\n                setCallStarted(true);\r\n                setCallEnded(false);\r\n            });\r\n        }\r\n    }, [location, history, user.result.name, user?.token]);\r\n\r\n    // when user clicks on join call button\r\n    const startCall = () => {\r\n        socket.emit('user-wants-to-join', roomId.current);\r\n\r\n        socket.on(\"join-response\", num => {\r\n\r\n            if (num === 0) {\r\n                setCallFull(false);\r\n                setCallStarted(true);\r\n                socket.emit(\"user-joined\", { userId: me, roomId: roomId.current });\r\n            }\r\n\r\n            if (num === 1) {\r\n                setCallFull(false);\r\n                socket.emit(\"other-user-id\", roomId.current);\r\n                socket.on(\"other-user\", otherUserId => {\r\n                    setCallStarted(true);\r\n                    setCallJoined(true);\r\n                    callUser(otherUserId);\r\n                });\r\n            }\r\n\r\n            if (num >= 2) {\r\n                console.log(num);\r\n                setCallFull(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    // answering call of other user\r\n    const answerCall = () => {\r\n        setCallAccepted(true);\r\n\r\n        // establishing a peer-to-peer connection\r\n        const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit(\"user-joined\", { userId: call.from, roomId: roomId.current });\r\n            socket.emit('answerCall', { signal: data, to: call.from, from: name });\r\n            messageRef.current.push(\r\n                { text: call.name + \" joined the chat.\" }\r\n            );\r\n            participantsRef.current.push({ name: call.name, handRaised: false });\r\n            setParticipantsVisible(false);\r\n            setParticipantsVisible(true);\r\n            audio.current.play();\r\n        });\r\n\r\n        // getting other users video\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        // receiving chat message\r\n        peer.on('data', (data) => {\r\n            let str = new TextDecoder(\"utf-8\").decode(data);\r\n            let obj = JSON.parse(str);\r\n            messageRef.current.push(obj);\r\n            setChatVisibility(false);\r\n            setChatVisibility(true);\r\n            audio.current.play();\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n        connectionRef.current = peer;\r\n    };\r\n\r\n    // calling other user using his socket id\r\n    const callUser = (id) => {\r\n        // establishing a peer-to-peer connection\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n\r\n        // getting other users video\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        // receiving chat message\r\n        peer.on('data', (data) => {\r\n            let str = new TextDecoder(\"utf-8\").decode(data);\r\n            let obj = JSON.parse(str);\r\n            messageRef.current.push(obj);\r\n            setChatVisibility(false);\r\n            setChatVisibility(true);\r\n            audio.current.play();\r\n        });\r\n\r\n        // when the 1st user accepts the call\r\n        socket.on('callAccepted', (data) => {\r\n            setCallAccepted(true);\r\n            const signal = data.signal;\r\n            const hostName = data.name;\r\n            const from = data.from;\r\n            setCall({ isReceivedCall: false, from, name: hostName, signal });\r\n            participantsRef.current.push({ name: hostName, handRaised: false });\r\n            setParticipantsVisible(false);\r\n            setParticipantsVisible(true);\r\n            peer.signal(data.signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    };\r\n\r\n    // when user raises hand\r\n    const handleHand = (handState) => {\r\n        participantsRef.current[0].handRaised = handState;\r\n\r\n        if (handState) {\r\n            socket.emit(\"hand-raised\", roomId.current);\r\n        }\r\n        else {\r\n            socket.emit(\"hand-lowered\", roomId.current);\r\n        }\r\n    }\r\n\r\n    // ending the call\r\n    const leaveCall = () => {\r\n        setCallEnded(true);\r\n\r\n        if (connectionRef.current) {\r\n            connectionRef.current.destroy();\r\n        }\r\n\r\n        window.location.reload();\r\n    };\r\n\r\n    // sending required states and references to various components\r\n    return (\r\n        <SocketContext.Provider value={{\r\n            call,\r\n            callAccepted,\r\n            callStarted,\r\n            setCallStarted,\r\n            callJoined,\r\n            callFull,\r\n            setCallJoined,\r\n            myVideo,\r\n            userVideo,\r\n            connectionRef,\r\n            messageRef,\r\n            participantsRef,\r\n            stream,\r\n            videoStream,\r\n            chatVisibility,\r\n            setChatVisibility,\r\n            participantsVisible,\r\n            setParticipantsVisible,\r\n            handleHand,\r\n            setHandRaised,\r\n            handRaised,\r\n            name,\r\n            setName,\r\n            callEnded,\r\n            me,\r\n            startCall,\r\n            callUser,\r\n            leaveCall,\r\n            answerCall\r\n        }}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport { ContextProvider, SocketContext };","import React, { useContext, useState } from 'react';\r\nimport { AppBar, Toolbar, IconButton, Tooltip } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { VideocamOff, Videocam, Mic, MicOff, ScreenShare, StopScreenShare, PanTool, Chat, People, PhoneDisabled, Assignment } from '@material-ui/icons';\r\nimport PanToolOutlinedIcon from '@material-ui/icons/PanToolOutlined';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nimport { SocketContext } from '../SocketContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        margin: 'auto',\r\n        width: 'fit-content'\r\n    },\r\n    appBar: {\r\n        top: 'auto',\r\n        background: '#0a0a0a',\r\n        width: 'fit-content',\r\n        alignItems: 'center',\r\n        position: 'inherit',\r\n        border: '1px solid white',\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [\r\n            theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n}));\r\n\r\nconst CallSettings = () => {\r\n    const classes = useStyles();\r\n    const { callStarted, stream, leaveCall, myVideo, videoStream, connectionRef, chatVisibility, setChatVisibility, participantsVisible, setParticipantsVisible, handleHand, handRaised, setHandRaised } = useContext(SocketContext);\r\n    const [videoOn, setVideoOn] = useState(true);\r\n    const [audioOn, setAudioOn] = useState(true);\r\n    const [shareScreen, setShareScreen] = useState(false);\r\n    const [shareStream, setShareStream] = useState(null);  // to keep track of screen sharing stream\r\n\r\n    // turn off camera\r\n    const offCamera = () => {\r\n        var vidTrack = stream.getVideoTracks();\r\n        vidTrack.forEach(track => track.enabled = false);\r\n    }\r\n\r\n    // turn on camera\r\n    const onCamera = () => {\r\n        var vidTrack = stream.getVideoTracks();\r\n        vidTrack.forEach(track => track.enabled = true);\r\n    }\r\n\r\n    // turn off mic\r\n    const offMic = () => {\r\n        var audTrack = stream.getAudioTracks();\r\n        audTrack.forEach(track => track.enabled = false);\r\n    }\r\n\r\n    // turn on mic\r\n    const onMic = () => {\r\n        var audTrack = stream.getAudioTracks();\r\n        audTrack.forEach(track => track.enabled = true);\r\n    }\r\n\r\n    // share user screen\r\n    const shareUserScreen = () => {\r\n        navigator.mediaDevices.getDisplayMedia({ cursor: true })\r\n            .then((currentStream) => {\r\n                setShareStream(currentStream);\r\n\r\n                // replace video track in peer stream with screen sharing stream track\r\n                if (connectionRef.current) {\r\n                    connectionRef.current.replaceTrack(stream.getTracks()[1], currentStream.getTracks()[0], stream);\r\n                }\r\n\r\n                // replace video for own user\r\n                myVideo.current.srcObject = currentStream;\r\n                setShareScreen(true);\r\n\r\n                currentStream.getTracks()[0].onended = () => {\r\n                    stopSharingScreen();\r\n                }\r\n            });\r\n    }\r\n\r\n    // stop screen sharing\r\n    const stopSharingScreen = () => {\r\n        if (connectionRef.current) {\r\n            connectionRef.current.replaceTrack(stream.getTracks()[1], videoStream.getTracks()[1], stream);\r\n        }\r\n        myVideo.current.srcObject = videoStream;\r\n\r\n        if (shareStream) {\r\n            shareStream.getTracks()[0].stop();\r\n        }\r\n\r\n        setShareScreen(false);\r\n    }\r\n\r\n    const showParticipants = () => {\r\n        setParticipantsVisible(!participantsVisible);\r\n        setChatVisibility(false);\r\n    }\r\n\r\n    const showChats = () => {\r\n        setChatVisibility(!chatVisibility);\r\n        setParticipantsVisible(false);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <AppBar className={classes.appBar} position='fixed'>\r\n                <Toolbar>\r\n                    {\r\n                        videoOn && (\r\n                            <Tooltip title='Turn Camera Off'>\r\n                                <IconButton onClick={() => { setVideoOn(false); offCamera(); }}>\r\n                                    <VideocamOff fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    {\r\n                        !videoOn && (\r\n                            <Tooltip title='Turn Camera On'>\r\n                                <IconButton onClick={() => { setVideoOn(true); onCamera(); }}>\r\n                                    <Videocam fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    {\r\n                        audioOn && (\r\n                            <Tooltip title='Turn Mic Off'>\r\n                                <IconButton onClick={() => { setAudioOn(false); offMic(); }}>\r\n                                    <MicOff fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    {\r\n                        !audioOn && (\r\n                            <Tooltip title='Turn Mic On'>\r\n                                <IconButton onClick={() => { setAudioOn(true); onMic(); }}>\r\n                                    <Mic fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    {\r\n                        callStarted && (\r\n                            <div>\r\n                                {\r\n                                    !shareScreen && (\r\n                                        <Tooltip title='Share Your Screen'>\r\n                                            <IconButton onClick={() => { shareUserScreen(); }}>\r\n                                                <ScreenShare fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    shareScreen && (\r\n                                        <Tooltip title='Stop Sharing'>\r\n                                            <IconButton onClick={() => { stopSharingScreen(); }}>\r\n                                                <StopScreenShare fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )\r\n                                }\r\n                                <Tooltip title='Copy Meet Link'>\r\n                                    <CopyToClipboard text={window.location.href}>\r\n                                        <IconButton>\r\n                                            <Assignment fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                        </IconButton>\r\n                                    </CopyToClipboard>\r\n                                </Tooltip>\r\n                                {\r\n                                    !handRaised && (\r\n                                        <Tooltip title='Raise Hand'>\r\n                                            <IconButton onClick={() => {setHandRaised(true); handleHand(true);}}>\r\n                                                <PanToolOutlinedIcon fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    handRaised && (\r\n                                        <Tooltip title='Lower Hand'>\r\n                                            <IconButton onClick={() => {setHandRaised(false); handleHand(false);}}>\r\n                                                <PanTool fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )\r\n                                }\r\n                                <Tooltip title='Show Conversation'>\r\n                                    <IconButton onClick={() => { showChats() }}>\r\n                                        <Chat fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Show Participants'>\r\n                                    <IconButton onClick={() => { showParticipants() }}>\r\n                                        <People fontSize=\"large\" style={{ fill: \"white\" }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title='Leave Call'>\r\n                                    <IconButton onClick={leaveCall}>\r\n                                        <PhoneDisabled fontSize=\"large\" style={{ fill: \"red\" }} />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CallSettings;\r\n","import React, { useContext } from 'react';\r\nimport { Button, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { SocketContext } from '../SocketContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    notification: {\r\n        zIndex: '2000',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n    paper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        padding: '10px',\r\n        fontFamily: 'sans-serif'\r\n    }\r\n}));\r\n\r\n// component used to pop notifications to users depending on context\r\nconst Notifications = () => {\r\n    const { answerCall, call, callAccepted, callJoined, callFull } = useContext(SocketContext);\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.notification}>\r\n            {call.isReceivedCall && !callAccepted && (\r\n                <Paper className={classes.paper}>\r\n                    <h1>{call.name} is calling: &nbsp; &nbsp; &nbsp;</h1>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n                        Answer\r\n                    </Button>\r\n                </Paper>\r\n            )}\r\n\r\n            {callJoined && !callAccepted && (\r\n                <Paper className={classes.paper}>\r\n                    <h1>Waiting for host to let you in...</h1>\r\n                </Paper>\r\n            )}\r\n\r\n            {callFull && (\r\n                <Paper className={classes.paper}>\r\n                    <h1>The call is currently full. Please join later.</h1>\r\n                </Paper>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notifications;\r\n","import * as api from '../api/index.js';\r\n\r\nconst SEND = \"SEND\";\r\n// dispatch action type and data to messageReducer\r\nexport const sendMessage = (msg) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.sendMessage(msg);\r\n        dispatch({ type: SEND, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { format } from \"timeago.js\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    message: {\r\n        maxWidth: '60%',\r\n        padding: '10px 20px',\r\n        margin: '5px',\r\n        border: '1px solid black',\r\n        borderRadius: '5px',\r\n        fontFamily: 'sans-serif'\r\n    },\r\n    left: {\r\n        float: 'left',\r\n        clear: 'both',\r\n        backgroundColor: '#eeeeee',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n        clear: 'both',\r\n        backgroundColor: '#6264a7',\r\n        color: 'white'\r\n    },\r\n    middle: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        textAlign: 'center',\r\n        clear: 'both',\r\n        backgroundColor: 'lightblue'\r\n    },\r\n    userName: {\r\n        fontWeight: 'bold'\r\n    },\r\n    time: {\r\n        fontSize: '12px',\r\n        textAlign: 'right'\r\n    }\r\n}))\r\n\r\n// message component in conversations which takes the message object as prop\r\nconst Message = ({msg}) => {\r\n    const classes = useStyles();\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n    const direction = user?.result._id === msg.senderId ? classes.right : classes.left;\r\n    return (\r\n        <div className={[classes.message, direction].join(' ')}>\r\n            <div className={classes.userName}>{msg.senderName}</div>\r\n            <p>{msg.text}</p>\r\n            <div className={classes.time}>{format(msg.createdAt)}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Tooltip, IconButton, Paper, TextField } from '@material-ui/core';\r\nimport { Send } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { SocketContext } from '../SocketContext';\r\nimport { getUserConversation } from '../api/index';\r\nimport { sendMessage } from '../actions/message';\r\n\r\nimport Message from './Message';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: '10px',\r\n        height: '85vh',\r\n        width: '20vw',\r\n        border: '1px solid black',\r\n        zIndex: '3000',\r\n        position: 'absolute',\r\n        top: '10vh',\r\n        right: '0',\r\n    },\r\n    messageField: {\r\n        width: '78%'\r\n    },\r\n    chatContainer: {\r\n        height: '78vh',\r\n        overflowY: 'auto'\r\n    },\r\n    message: {\r\n        width: '60%',\r\n        padding: '5px',\r\n        margin: '5px',\r\n        border: '1px solid black',\r\n        borderRadius: '5px'\r\n    },\r\n    left: {\r\n        float: 'left',\r\n        clear: 'both',\r\n        backgroundColor: 'white',\r\n    },\r\n    right: {\r\n        float: 'right',\r\n        clear: 'both',\r\n        backgroundColor: '#6264a7',\r\n        color: 'white'\r\n    },\r\n    middle: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        textAlign: 'center',\r\n        clear: 'both',\r\n        backgroundColor: 'lightblue'\r\n    }\r\n}));\r\n\r\n// chat component that is present within the video call (not in conversation)\r\nconst Chat = () => {\r\n    const { chatVisibility, messageRef, connectionRef, name } = useContext(SocketContext);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        // get previous messages for the corresponding chat\r\n        const getMessages = async () => {\r\n            const chatId = window.location.hash.replace('#/video-call/', '');\r\n            const chat = await getUserConversation(chatId);\r\n            messageRef.current = chat.data.messages;\r\n        }\r\n        getMessages();\r\n    }, [messageRef]);\r\n\r\n    // sending our message to peer and also save in database\r\n    const sendUserMessage = () => {\r\n        if (message) {\r\n            const date = new Date();\r\n\r\n            const msg = {\r\n                text: message,\r\n                senderName: name,\r\n                senderId: JSON.parse(localStorage.getItem('profile')).result._id,\r\n                createdAt: date.toISOString()\r\n            }\r\n\r\n            messageRef.current.push(msg);\r\n\r\n            if (connectionRef.current) {\r\n                connectionRef.current.send(JSON.stringify(msg));\r\n            }\r\n\r\n            dispatch(sendMessage({\r\n                message: message,\r\n                convoId: window.location.hash.replace('#/video-call/', '')\r\n            }));\r\n\r\n            setMessage('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                chatVisibility && (\r\n                    <Paper className={classes.paper}>\r\n                        <div id=\"chat-container\" className={classes.chatContainer}>\r\n                            {\r\n                                messageRef.current.map((msg) => <Message msg={msg} />)\r\n                            }\r\n                        </div>\r\n                        <form action='#' autoComplete=\"off\">\r\n                            <TextField label=\"Type Message\" value={message} name=\"messageInp\" id=\"messageInp\" className={classes.messageField} onChange={(e) => setMessage(e.target.value)} />\r\n                            <Tooltip title='Send Message'>\r\n                                <IconButton type='submit' color='primary' onClick={(e) => { e.preventDefault(); sendUserMessage(); }}>\r\n                                    <Send fontSize=\"large\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </form>\r\n                    </Paper>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useContext } from 'react';\r\nimport { Avatar, Paper } from '@material-ui/core';\r\nimport PanToolIcon from '@material-ui/icons/PanTool';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { SocketContext } from '../SocketContext';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: '10px',\r\n        height: '85vh',\r\n        width: '20vw',\r\n        border: '1px solid black',\r\n        zIndex: '3000',\r\n        position: 'absolute',\r\n        top: '10vh',\r\n        right: '0',\r\n        overflow: 'auto'\r\n    },\r\n    participant: {\r\n        display: 'flex',\r\n        padding: '10px',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            backgroundColor: '#eeeeee'\r\n        }\r\n    },\r\n    purple: {\r\n        color: 'black',\r\n        backgroundColor: '#6264a7'\r\n    },\r\n    userName: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        paddingLeft: '12px',\r\n        paddingRight: '12px',\r\n        fontFamily: 'sans-serif'\r\n    },\r\n}))\r\n\r\nconst Participants = () => {\r\n    const { participantsRef, participantsVisible } = useContext(SocketContext);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                participantsVisible && (\r\n                    <Paper className={classes.paper}>\r\n                        {\r\n                            participantsRef.current.map((p) => (\r\n                                <div className={classes.participant}>\r\n                                    <Avatar className={classes.purple} >{p.name.charAt(0)}</Avatar>\r\n                                    <p className={classes.userName} >{p.name}</p>\r\n                                    {\r\n                                        p.handRaised ? <PanToolIcon fontSize=\"large\" /> : <div></div>\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </Paper>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Participants\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Typography, Grid } from '@material-ui/core';\r\nimport { Phone } from '@material-ui/icons'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CallSettings from '../components/CallSettings';\r\nimport Notifications from '../components/Notifications';\r\nimport Chat from '../components/Chat';\r\nimport Participants from '../components/Participants';\r\n\r\nimport { SocketContext } from '../SocketContext';\r\nimport { getUserConversation } from '../api/index';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n    },\r\n    video: {\r\n        width: '50vw',\r\n        height: '78vh',\r\n        border: '2px solid black',\r\n        [theme.breakpoints.down('xs')]: {\r\n            width: '300px',\r\n        },\r\n    },\r\n    typography: {\r\n        zIndex: '1000',\r\n        position: 'absolute',\r\n        border: '2px solid black',\r\n        background: '#eeeeee',\r\n        padding: '5px 5px'\r\n    },\r\n    button: {\r\n        marginTop: 10,\r\n        marginRight: 'auto',\r\n        marginLeft: 'auto',\r\n        width: 'fit-content'\r\n    },\r\n}))\r\n\r\nconst VideoCall = () => {\r\n    const { name, callAccepted, callStarted, startCall, myVideo, userVideo, callEnded, stream, call } = useContext(SocketContext);\r\n    const classes = useStyles();\r\n    const [meetingName, setMeetingName] = useState(\"\");  // current meeting name\r\n\r\n    useEffect(() => {\r\n        // use effect called to get the current meeting name\r\n        const getMeetName = async () => {\r\n            const roomId = window.location.hash.replace('#/video-call/', '');\r\n            const chat = await getUserConversation(roomId);\r\n            setMeetingName(chat.data.conversation.conversationName);\r\n        }\r\n\r\n        getMeetName();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Grid container xs={12} direction='row' justify='center'>\r\n                <Grid container xs={6}>\r\n                    {\r\n                        // our own video\r\n                        stream && (\r\n                            <Grid item xs={12} md={6}>\r\n                                <Typography className={classes.typography} variant='h5' gutterBottom>{name || 'Name'}</Typography>\r\n                                <video playsInline muted ref={myVideo} autoPlay className={classes.video} />\r\n                            </Grid>\r\n                        )\r\n                    }\r\n                </Grid>\r\n                {\r\n                    // displays meeting name and join call button\r\n                    !callAccepted && !callStarted && (<Grid container xs={6} direction='column' justify='center' align='center'>\r\n                        <Typography variant='h4' gutterBottom>{meetingName}</Typography>\r\n                        <Button variant=\"contained\" onClick={() => { startCall() }} startIcon={<Phone fontSize=\"large\" />} className={classes.button}>\r\n                            Join Call\r\n                        </Button>\r\n                    </Grid>)\r\n                }\r\n                {\r\n                    // other user's video \r\n                    callAccepted && !callEnded && (\r\n                        <Grid item xs={12} md={6}>\r\n                            <Typography className={classes.typography} variant='h5' gutterBottom>{call.name || 'Name'}</Typography>\r\n                            <video playsInline ref={userVideo} autoPlay className={classes.video} />\r\n                        </Grid>\r\n                    )\r\n                }\r\n            </Grid>\r\n            <Chat />\r\n            <Participants />\r\n            <CallSettings />\r\n            <Notifications />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoCall;\r\n","import * as api from '../api/index.js';\r\n\r\nconst GET_ALL = \"GET_ALL\";\r\nconst CREATE = \"CREATE\";\r\nconst GET_CONVO = \"GET_CONVO\";\r\n\r\n// dispatch action type and data to conversationReducer\r\n\r\nexport const getUserConversations = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.getConversations();\r\n        dispatch({ type: GET_ALL, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const createConversation = (convo) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.createConversation(convo);\r\n        dispatch({ type: CREATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getConversation = (chatId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.getUserConversation(chatId);\r\n        dispatch({ type: GET_CONVO, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/chat_icon.f223e380.png\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport chat_icon from '../assets/chat_icon.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    conversation: {\r\n        display: 'flex',\r\n        backgroundColor: '#eeeeee',\r\n        alignItems: 'center',\r\n        padding: '10px',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            backgroundColor: '#ffffff'\r\n        }\r\n    },\r\n\r\n    conversationImg: {\r\n        width: '40px',\r\n        height: '40px',\r\n        borderRadius: '50%',\r\n        objectFit: 'cover',\r\n        marginRight: '20px'\r\n    },\r\n\r\n    conversationName: {\r\n        fontWeight: 'bold',\r\n        fontFamily: 'sans-serif'\r\n    }\r\n}))\r\n\r\n// conversation component which takes conversation name as prop\r\nconst Conversation = (conversation) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.conversation}>\r\n            <img className={classes.conversationImg} src={chat_icon} alt=\"Conversation Icon\" />\r\n            <span className={classes.conversationName}>{conversation.conversation.conversationName}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Conversation;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Typography, Grid, Button, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { createConversation } from '../actions/conversation';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        backgroundColor: '#6264a7',\r\n        color: '#ffffff',\r\n        padding: '10px'\r\n    },\r\n    button: {\r\n        margin: '0px 4px'\r\n    }\r\n}))\r\n\r\nconst ChatTopBar = ({ convoName, chatId }) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    // form data for starting new conversation\r\n    const [isFormVisible, setIsFormVisible] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        conversationName: \"\"\r\n    });\r\n\r\n    // submit new conversation form data\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(createConversation(formData));\r\n        setFormData({ ...formData, conversationName: \"\" });\r\n    }\r\n\r\n    // to join the corresponding video call to chat in new tab\r\n    const redirectToVideo = () => {\r\n        const win = window.open('/MS-Teams-Clone#/video-call/' + chatId);\r\n        win.focus();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.container}>\r\n                <Grid container>\r\n                    <Grid item xs={7}>\r\n                        <Typography variant='h6'>\r\n                            {convoName}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button className={classes.button} variant='contained' onClick={redirectToVideo}>Join Call</Button>\r\n                        <Button className={classes.button} variant='contained' onClick={() => setIsFormVisible(!isFormVisible)}>New Meeting</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            {\r\n                isFormVisible && (\r\n                    <form autoComplete=\"off\">\r\n                        <Paper style={{ marginTop: '10px' }}>\r\n                            <Grid container spacing={2} justify=\"center\">\r\n                                <Grid item xs={7}>\r\n                                    <TextField name=\"conversationName\" required value={formData.conversationName} label=\"Meeting name\" fullWidth onChange={(e) => setFormData({ ...formData, conversationName: e.target.value })} />\r\n                                </Grid>\r\n                                <Grid item xs={3}>\r\n                                    <Button type=\"submit\" color=\"primary\" className={classes.button} variant='contained' style={{ marginTop: '10px' }} onClick={handleSubmit}>Start Call</Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatTopBar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Typography, Button, TextField, Grid, Paper } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Send } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { getUserConversations, getConversation, createConversation } from '../actions/conversation';\r\nimport { sendMessage } from '../actions/message';\r\n\r\nimport Conversation from '../components/Conversation';\r\nimport Message from '../components/Message';\r\nimport ChatTopBar from '../components/ChatTopBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    messenger: {\r\n        height: 'calc(100vh - 68px)',\r\n        display: 'flex',\r\n    },\r\n\r\n    chatMenu: {\r\n        flex: '2.5',\r\n        backgroundColor: '#eeeeee'\r\n    },\r\n\r\n    chatMenuTopBar: {\r\n        backgroundColor: '#6264a7',\r\n        padding: '12px',\r\n        color: '#eeeeee',\r\n        borderRight: '1px solid white'\r\n    },\r\n\r\n    conversationWrapper: {\r\n        overflowY: 'auto',\r\n        height: '80vh'\r\n    },\r\n\r\n    chatBox: {\r\n        flex: '5.5',\r\n        backgroundColor: '#ffffff'\r\n    },\r\n\r\n    chatBoxWrapper: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n        height: '100 %',\r\n    },\r\n\r\n    chatBoxTop: {\r\n        height: '68vh',\r\n        overflowY: 'auto',\r\n        padding: '10px'\r\n    },\r\n\r\n    chatBoxBottom: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between'\r\n    }\r\n\r\n}))\r\n\r\nconst Chat = () => {\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        // check if user is logged in\r\n        const token = user?.token;\r\n        if (!token) {\r\n            history.push('/auth');\r\n            setUser(null);\r\n        }\r\n    }, [user?.token, history]);\r\n\r\n    useEffect(() => {\r\n        // get all user conversations via API call\r\n        dispatch(getUserConversations());\r\n        localStorage.removeItem(\"currentChat\");\r\n    }, [dispatch]);\r\n\r\n    const conversations = useSelector((state) => state.conversation);\r\n\r\n    const [currentChatId, setCurrentChatId] = useState(\"\");  // selected conversation id\r\n    const [flag, setFlag] = useState(false);  // keep track if currentChatId state has loaded or not\r\n\r\n    useEffect(() => {\r\n        // get all messages of the conversation via API\r\n        const getMessages = async () => {\r\n            try {\r\n                setFlag(false);\r\n                dispatch(getConversation(currentChatId))\r\n                .then(() => {\r\n                    const chat =  JSON.parse(localStorage.getItem('currentChat'));\r\n                    if(chat.conversation){\r\n                        setFlag(true);\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        getMessages();\r\n    }, [dispatch, currentChatId]);\r\n\r\n    const conversation = JSON.parse(localStorage.getItem('currentChat'));\r\n\r\n    const [msg, setMsg] = useState(\"\");\r\n\r\n    // sending message data\r\n    const formMsgData = {\r\n        message: msg,\r\n        convoId: JSON.parse(localStorage.getItem('currentChat'))?.conversation?._id\r\n    }\r\n\r\n    // create new conversation data\r\n    const [formCallData, setFormCallData] = useState({\r\n        conversationName: \"\"\r\n    });\r\n\r\n    // create new call / conversation\r\n    const handleCallSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(createConversation(formCallData));\r\n    }\r\n\r\n    // send message\r\n    const handleMessageSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(sendMessage(formMsgData));\r\n        setMsg(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className={classes.messenger}>\r\n            <div className={classes.chatMenu}>\r\n                <div className={classes.chatMenuTopBar}>\r\n                    <Typography variant='h6'>Your Chats</Typography>\r\n                </div>\r\n                <div className={classes.conversationWrapper}>\r\n                    {\r\n                        !conversations.length ? (\r\n                            <div>\r\n                                <Typography align='center' variant='h6'>You have no chats to show</Typography>\r\n                            </div>\r\n                        )\r\n                            : (\r\n                                conversations.map((convo) => (\r\n                                    <div onClick={() => { setCurrentChatId(convo._id); }}>\r\n                                        <Conversation key={convo._id} conversation={convo} />\r\n                                    </div>))\r\n                            )\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={classes.chatBox}>\r\n                <div className={classes.chatBoxWrapper}>\r\n                    {\r\n                        !flag ? <div></div>\r\n                            : (<ChatTopBar convoName={conversation.conversation ? conversation.conversation.conversationName : \"\"} chatId={currentChatId}/>)\r\n                    }\r\n                    <div className={classes.chatBoxTop}>\r\n                        {\r\n                            !currentChatId ? (\r\n                                <div>\r\n                                    <Typography align='center' variant='h6'>Select a Chat to view messages.</Typography>\r\n                                    <form autoComplete=\"off\">\r\n                                        <Paper style={{ marginTop: '10px' }}>\r\n                                            <Grid container spacing={2} justify=\"center\">\r\n                                                <Grid item xs={7}>\r\n                                                    <TextField name=\"conversationName\" required value={formCallData.conversationName} label=\"Meeting name\" fullWidth onChange={(e) => setFormCallData({ ...formCallData, conversationName: e.target.value })} />\r\n                                                </Grid>\r\n                                                <Grid item xs={3}>\r\n                                                    <Button type=\"submit\" color=\"primary\" className={classes.button} variant='contained' style={{ marginTop: '10px' }} onClick={handleCallSubmit}>Start Call</Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Paper>\r\n                                    </form>\r\n                                </div>)\r\n                                : (\r\n                                    <div>\r\n                                        {\r\n                                            (!flag || !conversation.messages || !conversation.messages.length) ? <></>\r\n                                                : (\r\n                                                    conversation.messages.map((msg) => (\r\n                                                        <Message msg={msg} />\r\n                                                    ))\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                        }\r\n                    </div>\r\n                    {\r\n                        (!flag || !currentChatId) ? <div></div>\r\n                            : (\r\n                                <div className={classes.chatBoxBottom}>\r\n                                    <Grid container direction='row'>\r\n                                        <Grid item xs={9}>\r\n                                            <TextField label=\"Type your message...\" fullWidth value={formMsgData.message} onChange={(e) => setMsg(e.target.value)} />\r\n                                        </Grid>\r\n                                        <Grid item xs={1}>\r\n\r\n                                        </Grid>\r\n                                        <Grid item xs={2}>\r\n                                            <Button type='submit' variant=\"contained\" color=\"primary\" onClick={handleMessageSubmit} startIcon={<Send fontSize=\"large\" />} style={{ marginTop: 10 }} fullWidth>\r\n                                                Send\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </div>\r\n                            )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport TopBar from './components/TopBar';\r\n\r\nimport Auth from './views/Auth';\r\nimport VideoCall from './views/VideoCall';\r\nimport Chat from './views/Chat';\r\n\r\nimport { ContextProvider } from './SocketContext';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <HashRouter>\r\n                <TopBar />\r\n                <Switch>\r\n                    {/* routing to various views */}\r\n                    <Route path='/video-call/:id' exact>\r\n                        <ContextProvider>\r\n                            <VideoCall />\r\n                        </ContextProvider>\r\n                    </Route>\r\n                    <Route path='/auth' exact component={Auth} />\r\n                    <Route path='/' exact component={Chat} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const AUTH = \"AUTH\";\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\n// authreducre to handle AUTH and LOGOUT action types\r\nconst authReducer = (state = {authData: null}, action) => {\r\n    switch(action.type){\r\n        case AUTH:\r\n            localStorage.setItem('profile', JSON.stringify({...action?.data}));\r\n            return {...state, authData: action?.data};\r\n        case LOGOUT:\r\n            localStorage.clear();\r\n            return {...state, authData: null};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","const CREATE = \"CREATE\";\r\nconst GET_ALL = \"GET_ALL\";\r\nconst GET_CONVO = \"GET_CONVO\";\r\n\r\n// conversationReducer to handle various conversation API calls\r\nconst conversationReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case CREATE:\r\n            return [...state, action.payload];\r\n        case GET_ALL:\r\n            return action.payload;\r\n        case GET_CONVO:\r\n            localStorage.setItem('currentChat', JSON.stringify({...action?.payload}));\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default conversationReducer;","const SEND = \"SEND\";\r\n\r\n// messageReducer to handle sending messages call\r\nconst messageReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case SEND:\r\n            return [...state, action.payload];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default messageReducer;","import { combineReducers } from 'redux';\r\n\r\nimport auth from './auth';\r\nimport conversation from './conversation';\r\nimport message from './message';\r\n\r\nexport const reducers = combineReducers({ auth, conversation, message });","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './App';\r\nimport './styles.css';\r\n\r\nimport { reducers } from './reducers';\r\n\r\n// redux thunk store\r\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}